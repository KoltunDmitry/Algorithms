import java.io.*;

public class Solution {
    public static void main(String[] args) throws IOException {
        StreamTokenizer st = new StreamTokenizer(new BufferedReader(new FileReader("input.txt")));
        Tree tree = new Tree();
        boolean isExistKeyDelete = false;
        boolean isExistVertexDelete = false;
        int keyDelete = 0;
        while (st.nextToken() == StreamTokenizer.TT_NUMBER) {
            if (!isExistKeyDelete) {
                keyDelete = (int) st.nval;
                isExistKeyDelete = true;
            } else {
                if((int)st.nval == keyDelete){
                    isExistVertexDelete = true;
                }
                tree.insertion((int) st.nval);
            }
        }
        if(isExistVertexDelete) {
            tree.delete(keyDelete);
        }
            StringBuilder sb = new StringBuilder();
            FileWriter fw = new FileWriter("output.txt");
            sb = tree.circumvention(tree.getRoot(),new StringBuilder());
            fw.write(sb.toString());
            fw.close();
    }
}
class Tree {
    private Node root;
    public void insertion(int key) {
        if (root == null) {
            root = new Node(key);
            return;
        }
        Node node = root;
        while (true) {
            if (key < node.key) {
                if (node.left == null) {
                    node.left = new Node(key);
                    return;
                } else {
                    node = node.left;
                }
            } else if (key > node.key) {
                if (node.right == null) {
                    node.right = new Node(key);
                    return;
                } else {
                    node = node.right;
                }
            } else {
                return;
            }
        }
    }
    public void replaceChild(Node parent, Node old, Node notOld){
        if(parent == null){
            root = notOld;
        }
        else if(parent.left == old){
            parent.left = notOld;
        }
        else if(parent.right == old){
            parent.right = notOld;
        }
    }
    public void delete(int keyDelete){
        Node parent = null;
        Node vertex = root;
        while(true){
            if(vertex == null){
                return;
            }
            if(keyDelete < vertex.key){
                parent = vertex;
                vertex = vertex.left;
            }
            else if(keyDelete > vertex.key){
                parent = vertex;
                vertex = vertex.right;
            }
            else {
                break;
            }
        }
        Node result = null;
        if(vertex.left == null){
            result = vertex.right;
        }
        else if(vertex.right == null){
            result = vertex.left;
        }
        else{
            Node minNodeParent = vertex;
            Node minNode = vertex.right;
            while (minNode.left!=null){
                minNodeParent = minNode;
                minNode = minNode.left;
            }
            result = vertex;
            vertex.key = minNode.key;

            replaceChild(minNodeParent,minNode,minNode.right);
        }
        replaceChild(parent,vertex,result);
    }
    public StringBuilder circumvention(Node node, StringBuilder sb) throws IOException {
        if (node != null) {
            if (sb.length() == 0) {
                sb.append(node.key);
            } else {
                sb.append("\n").append(node.key);
            }
            circumvention(node.left, sb);
            circumvention(node.right, sb);
        }
        return sb;
    }

    public Node getRoot() {
        return root;
    }
}
class Node {
    public int key;
    public Node left;
    public Node right;
    public Node(int key) {
        this.key = key;
    }
}